AFRAME.registerComponent('global-soundtrack', {
  init: function () {
    // List of audio assets
    this.audioAssets = ['#lavender', '#honey_jam', '#aromatic'];

    // Shuffle the audio assets
    this.audioAssets.sort(() => Math.random() - 0.5);

    // Set the shuffled playlist
    this.currentTrackIndex = 0;
    this.playNextTrack();

    // Listen for sound-ended event
    this.el.addEventListener('sound-ended', () => {
      this.playNextTrack();
    });
  },
  playNextTrack: function () {
    // Play the next track in the shuffled playlist
    this.el.setAttribute('sound', 'src', this.audioAssets[this.currentTrackIndex]);
    this.el.setAttribute('sound', 'autoplay', true);
    this.el.setAttribute('sound', 'volume', 5);

    // Move to the next track in the playlist
    this.currentTrackIndex = (this.currentTrackIndex + 1) % this.audioAssets.length;
  }
});


AFRAME.registerComponent('glow', {
        schema: {
          color: {default: '#ffffff', type: 'color'},
          intensity: {default: 1.0}
        },
        init: function () {
          this.el.addEventListener('object3dset', function () {
            this.update();
          }.bind(this));
        },
        update: function () {
          var data = this.data;
          this.el.object3D.traverse(function (node) {
            if (node.isMesh) {
              node.material.emissive.copy(new THREE.Color(data.color));
              node.material.emissiveIntensity = data.intensity;
            }
          });
        }
      });
      
      /**
       * Simple spin-and-levitate animation.
       */
      AFRAME.registerComponent('levitate', {
        tick: function (t, dt) {
          var mesh = this.el.getObject3D('mesh');
          if (!mesh) return;
          mesh.rotation.y += 0.1 * dt / 1000;
          mesh.position.y = 0.25 * Math.sin(t / 1000);
        }
      });
      
      /**
       * Removes current element if on a mobile device.
       */
      AFRAME.registerComponent('not-mobile',  {
        init: function () {
          var el = this.el;
          if (el.sceneEl.isMobile) {
            el.parentEl.remove(el);
          }
        }
      });


 


  
